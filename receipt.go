package main

import (
// 	"math/big"
	"encoding/json"
	"errors"
	"merkle-patrica-trie/common"
	"merkle-patrica-trie/rlp"
)

const (
	// BloomByteLength represents the number of bytes used in a header log bloom.
	BloomByteLength = 256

	// BloomBitLength represents the number of bits used in a header log bloom.
	BloomBitLength = 8 * BloomByteLength
)

// Bloom represents a 2048 bit bloom filter.
type Bloom [BloomByteLength]byte

//go:generate go run github.com/fjl/gencodec -type Log -field-override logMarshaling -out gen_log_json.go

// Log represents a contract log event. These events are generated by the LOG opcode and
// stored/indexed by the node.
type Log struct {
	// Consensus fields:
	// address of the contract that generated the event
	Address common.Address `json:"address" gencodec:"required"`
	// list of topics provided by the contract.
	Topics []common.Hash `json:"topics" gencodec:"required"`
	// supplied by the contract, usually ABI-encoded
	Data []byte `json:"data" gencodec:"required"`

	// Derived fields. These fields are filled in by the node
	// but not secured by consensus.
	// block in which the transaction was included
// 	BlockNumber uint64 `json:"blockNumber"`
	// hash of the transaction
	TxHash common.Hash `json:"transactionHash" gencodec:"required"`
	// index of the transaction in the block
	TxIndex uint `json:"transactionIndex"`
	// hash of the block in which the transaction was included
// 	BlockHash common.Hash `json:"blockHash"`
	// index of the log in the block
	Index uint `json:"logIndex"`

	// The Removed field is true if this log was reverted due to a chain reorganisation.
	// You must pay attention to this field if you receive logs through a filter query.
	Removed bool `json:"removed"`
}

type Receipt struct {
	// Consensus fields: These fields are defined by the Yellow Paper
// 	Type              uint8  `json:"type,omitempty"`
	PostState         []byte `json:"root"`
	Status            uint64 `json:"status"`
	CumulativeGasUsed uint64 `json:"cumulativeGasUsed" gencodec:"required"`
	Bloom             Bloom  `json:"logsBloom"         gencodec:"required"`
	Logs              []*Log `json:"logs"              gencodec:"required"`

	// Implementation fields: These fields are added by geth when processing a transaction.
	TxHash            common.Hash    `json:"transactionHash" gencodec:"required"`
// 	ContractAddress   common.Address `json:"contractAddress"`
	GasUsed           uint64         `json:"gasUsed" gencodec:"required"`
// 	EffectiveGasPrice *big.Int       `json:"effectiveGasPrice"`

	// Inclusion information: These fields provide information about the inclusion of the
	// transaction corresponding to this receipt.
// 	BlockHash        common.Hash `json:"blockHash,omitempty"`
// 	BlockNumber      *big.Int    `json:"blockNumber,omitempty"`
// 	TransactionIndex uint        `json:"transactionIndex"`
}

type receiptMarshaling struct {
// 	Type              common.Uint64
	PostState         common.Bytes
	Status            common.Uint64
	CumulativeGasUsed common.Uint64
	GasUsed           common.Uint64
// 	BlockNumber       *common.Big
// 	TransactionIndex  common.Uint
}

var _ = (*receiptMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r Receipt) MarshalJSON() ([]byte, error) {
	type Receipt struct {
		PostState         common.Bytes  `json:"root"`
		Status            common.Uint64 `json:"status"`
		CumulativeGasUsed common.Uint64 `json:"cumulativeGasUsed" gencodec:"required"`
		Bloom             Bloom          `json:"logsBloom"         gencodec:"required"`
		Logs              []*Log         `json:"logs"              gencodec:"required"`
		TxHash            common.Hash    `json:"transactionHash" gencodec:"required"`
// 		ContractAddress   common.Address `json:"contractAddress"`
		GasUsed           common.Uint64 `json:"gasUsed" gencodec:"required"`
// 		BlockHash         common.Hash    `json:"blockHash,omitempty"`
// 		BlockNumber       *common.Big   `json:"blockNumber,omitempty"`
// 		TransactionIndex  common.Uint   `json:"transactionIndex"`
	}
	var enc Receipt
	enc.PostState = r.PostState
	enc.Status = common.Uint64(r.Status)
	enc.CumulativeGasUsed = common.Uint64(r.CumulativeGasUsed)
	enc.Bloom = r.Bloom
	enc.Logs = r.Logs
	enc.TxHash = r.TxHash
// 	enc.ContractAddress = r.ContractAddress
	enc.GasUsed = common.Uint64(r.GasUsed)
// 	enc.BlockHash = r.BlockHash
// 	enc.BlockNumber = (*common.Big)(r.BlockNumber)
// 	enc.TransactionIndex = common.Uint(r.TransactionIndex)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *Receipt) UnmarshalJSON(input []byte) error {
	type Receipt struct {
		PostState         *common.Bytes  `json:"root"`
		Status            *common.Uint64 `json:"status"`
		CumulativeGasUsed *common.Uint64 `json:"cumulativeGasUsed" gencodec:"required"`
		Bloom             *Bloom          `json:"logsBloom"         gencodec:"required"`
		Logs              []*Log          `json:"logs"              gencodec:"required"`
		TxHash            *common.Hash    `json:"transactionHash" gencodec:"required"`
// 		ContractAddress   *common.Address `json:"contractAddress"`
		GasUsed           *common.Uint64 `json:"gasUsed" gencodec:"required"`
// 		BlockHash         *common.Hash    `json:"blockHash,omitempty"`
// 		BlockNumber       *common.Big    `json:"blockNumber,omitempty"`
// 		TransactionIndex  *common.Uint   `json:"transactionIndex"`
	}
	var dec Receipt
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.PostState != nil {
		r.PostState = *dec.PostState
	}
	if dec.Status != nil {
		r.Status = uint64(*dec.Status)
	}
	if dec.CumulativeGasUsed == nil {
		return errors.New("missing required field 'cumulativeGasUsed' for Receipt")
	}
	r.CumulativeGasUsed = uint64(*dec.CumulativeGasUsed)
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Receipt")
	}
	r.Bloom = *dec.Bloom
	if dec.Logs == nil {
		return errors.New("missing required field 'logs' for Receipt")
	}
	r.Logs = dec.Logs
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Receipt")
	}
	r.TxHash = *dec.TxHash
// 	if dec.ContractAddress != nil {
// 		r.ContractAddress = *dec.ContractAddress
// 	}
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Receipt")
	}
	r.GasUsed = uint64(*dec.GasUsed)
// 	if dec.BlockHash != nil {
// 		r.BlockHash = *dec.BlockHash
// 	}
// 	if dec.BlockNumber != nil {
// 		r.BlockNumber = (*big.Int)(dec.BlockNumber)
// 	}
// 	if dec.TransactionIndex != nil {
// 		r.TransactionIndex = uint(*dec.TransactionIndex)
// 	}
	return nil
}

type logMarshaling struct {
	Data        common.Bytes
// 	BlockNumber hexutil.Uint64
	TxIndex     common.Uint
	Index       common.Uint
}

var _ = (*logMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (l Log) MarshalJSON() ([]byte, error) {
	type Log struct {
		Address     common.Address `json:"address" gencodec:"required"`
		Topics      []common.Hash  `json:"topics" gencodec:"required"`
		Data        common.Bytes  `json:"data" gencodec:"required"`
// 		BlockNumber common.Uint64 `json:"blockNumber"`
		TxHash      common.Hash    `json:"transactionHash" gencodec:"required"`
		TxIndex     common.Uint   `json:"transactionIndex" gencodec:"required"`
// 		BlockHash   common.Hash    `json:"blockHash"`
		Index       common.Uint   `json:"logIndex" gencodec:"required"`
		Removed     bool           `json:"removed"`
	}
	var enc Log
	enc.Address = l.Address
	enc.Topics = l.Topics
	enc.Data = l.Data
// 	enc.BlockNumber = common.Uint64(l.BlockNumber)
	enc.TxHash = l.TxHash
	enc.TxIndex = common.Uint(l.TxIndex)
// 	enc.BlockHash = l.BlockHash
	enc.Index = common.Uint(l.Index)
	enc.Removed = l.Removed
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (l *Log) UnmarshalJSON(input []byte) error {
	type Log struct {
		Address     *common.Address `json:"address" gencodec:"required"`
		Topics      []common.Hash   `json:"topics" gencodec:"required"`
		Data        *common.Bytes  `json:"data" gencodec:"required"`
// 		BlockNumber *common.Uint64 `json:"blockNumber"`
		TxHash      *common.Hash    `json:"transactionHash" gencodec:"required"`
		TxIndex     *common.Uint   `json:"transactionIndex" gencodec:"required"`
// 		BlockHash   *common.Hash    `json:"blockHash"`
		Index       *common.Uint   `json:"logIndex" gencodec:"required"`
		Removed     *bool           `json:"removed"`
	}
	var dec Log
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Address == nil {
		return errors.New("missing required field 'address' for Log")
	}
	l.Address = *dec.Address
	if dec.Topics == nil {
		return errors.New("missing required field 'topics' for Log")
	}
	l.Topics = dec.Topics
	if dec.Data == nil {
		return errors.New("missing required field 'data' for Log")
	}
	l.Data = *dec.Data
// 	if dec.BlockNumber != nil {
// 		l.BlockNumber = uint64(*dec.BlockNumber)
// 	}
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Log")
	}
	l.TxHash = *dec.TxHash
	if dec.TxIndex == nil {
		return errors.New("missing required field 'transactionIndex' for Log")
	}
	l.TxIndex = uint(*dec.TxIndex)
// 	if dec.BlockHash != nil {
// 		l.BlockHash = *dec.BlockHash
// 	}
	if dec.Index == nil {
		return errors.New("missing required field 'logIndex' for Log")
	}
	l.Index = uint(*dec.Index)
	if dec.Removed != nil {
		l.Removed = *dec.Removed
	}
	return nil
}

// receiptRLP is the consensus encoding of a receipt.
type receiptRLP struct {
	PostStateOrStatus []byte
	CumulativeGasUsed uint64
	Bloom             Bloom
	Logs              []*Log
}

// storedReceiptRLP is the storage encoding of a receipt.
type storedReceiptRLP struct {
	PostStateOrStatus []byte
	CumulativeGasUsed uint64
	Logs              []*Log
}

func (receipt Receipt) GetReceiptRLP() ([]byte, error) {
	return rlp.EncodeToBytes(receipt)
}
